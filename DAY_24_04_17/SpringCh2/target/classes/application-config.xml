<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<bean id="helloService" class="com.example.myapp.aop.HelloService" />
	<!-- <bean id="helloService" class="com.example.myapp.aop.HelloServiceProxy" /> --><!-- HelloService클래스를 Proxy클래스를 사용하면 로그가 정상적으로 출력됨, AOP설정을하고 Proxy클래스 쓸거 아니니까 지워야함 -->
	<bean id="helloController" class="com.example.myapp.aop.HelloController">
		<property name="helloService" ref="helloService" /> <!-- name은 컨트롤러클래스의 setter메서드 이름을 따라감 -->
	</bean>
	
	<!-- <context:component-scan base-package="com.example.myapp" /> -->
	
	
	<!-- AOP설정 -->
	<bean id="helloLog" class="com.example.myapp.aop.HelloLog" />
	<!-- 어떤 핵심코드에 어떤 공통코드가 언제 실행되는지 설정 -->
	<aop:config>
	
		<!-- 핵심코드(Pointcut) 설정 -->
		<aop:pointcut expression="execution(* com.example..HelloService.sayHello(..))" id="hello"/>
		
		<!-- hello Pointcut에 before 어드바이스 설정 -->
		<aop:aspect ref="helloLog"> <!-- AOP설정에 해둔 bean의 id를 참조 -->
			<!-- <aop:before pointcut-ref="hello" method="log"/> --> <!-- 위에 만들어둔 aop:pointcut 태그의 id값을 참조(ref) -->
			<!-- <aop:after pointcut-ref="hello" method="log"/> -->
			<!-- <aop:after-returning pointcut-ref="hello" method="resultLog" returning="resultObj"/> -->
			<!-- <aop:after-throwing method="exceptionLog" pointcut-ref="hello" throwing="exception"/> -->
			<aop:around method="aroundLog" pointcut-ref="hello"/>
		</aop:aspect>
		
	</aop:config>
</beans>
